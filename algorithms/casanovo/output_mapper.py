"""
Script to convert predictions from the algorithm output format 
to the common output format.
"""

import argparse
import re
from pyteomics.mztab import MzTab
from base import OutputMapperBase


class OutputMapper(OutputMapperBase):
    REPLACEMENTS = [
        ("C+57.021", "C")  # C is written without Carbamidomethyl modification
    ]
    PTM_PATTERN = r"([A-Z])([0-9.+-]+)" # find AAs with PTMs 
    N_TERM_MOD_PATTERN = r"^([0-9.+-]+)" # find N-term modifications
    
    FILE_IDX_PATTERN = "\[(\d+)\]"
    
    def _transform_match_ptm(self, match: re.Match) -> str:
        """
        Transform representation of peptide substring matching
        the amino acid with PTM pattern.
        `PE+n_modP` -> `PE[+n_mod]P`
        
        Parameters
        ----------
        match : re.Match
            Substring matching the amino acid with PTM pattern.

        Returns
        -------
        transformed_match : str
            Transformed amino acid with PTM pattern representation.
        """
        aa, ptm = match.group(1), match.group(2)
        if ptm[0] not in ('-', '+'):
            ptm = "+" + ptm
        return f"{aa}[{ptm}]"
    
    def _transform_match_n_term_mod(self, match: re.Match) -> str:
        """
        Transform representation of peptide substring matching
        the N-term modification pattern.
        `+n_modPEP` -> `[+n_mod]-PEP`
        
        Parameters
        ----------
        match : re.Match
            Substring matching the N-term modification pattern.

        Returns
        -------
        transformed_match : str
            Transformed N-term modification pattern representation.
        """
        ptm = match.group(1)
        return f"[{ptm}]-"
    
    def _transform_match_file_idx(self, match: re.Match) -> str:
        """TODO."""

        file_idx = int(match.group(0)[1:-1])
        return f"F{file_idx - 1}"
    
    def _parse_scores(self, scores: str) -> list[float]:
        """
        Convert per-token scores from a string of float scores 
        separated by ',' to a list of float numbers.
        """
        scores = scores.split(",")
        scores = list(map(float, scores))
        return scores
    
    def format_scan_index(self, scan_index: str) -> str:
        """
        TODO.
        Transform scan index generated by the algorithm to the common format
        `ms_run[i]:index=j` -> `F[i-1]:j`.
        """

        scan_index = re.sub("[a-z=_]", "", scan_index)
        scan_index = re.sub(self.FILE_IDX_PATTERN, self._transform_match_file_idx, scan_index)
        return scan_index
    
    def format_sequence(self, sequence: str) -> str:
        """
        Convert peptide sequence to the common output data format 
        (ProForma with modifications represented 
        in the delta mass notation).

        Parameters
        ----------
        sequence : str
            Peptide sequence in the original algorithm output format.

        Returns
        -------
        transformed_sequence : str
            Peptide sequence in the common output data format.   
        """

        # direct (token-to-token) replacements
        for repl_args in self.REPLACEMENTS:
            sequence = sequence.replace(*repl_args)

        # transform PTM notation:
        # represent in ProForma delta mass notation PE[+ptm]P
        if re.search(self.PTM_PATTERN, sequence):
            sequence = re.sub(self.PTM_PATTERN, self._transform_match_ptm, sequence)

        # transform n-term modification notation
        # represent in ProForma delta mass notation [+n_term_mod]-PEP
        if re.search(self.N_TERM_MOD_PATTERN, sequence):
            sequence = re.sub(self.N_TERM_MOD_PATTERN, self._transform_match_n_term_mod, sequence)

        return sequence


parser = argparse.ArgumentParser()
parser.add_argument(
    "output_path", help="The path to the algorithm predictions file."
)
args = parser.parse_args()

# Read predictions from output file
output_data = MzTab(args.output_path)
output_data = output_data.spectrum_match_table

# Rename columns to the expected column names if needed
output_data = output_data.rename(
    {
        "search_engine_score[1]": "score",
        "spectra_ref": "scan_indices",
        "opt_ms_run[1]_aa_scores": "aa_scores",
    },
    axis=1,
)

# Transform data to the common output format
output_mapper = OutputMapper()
output_data = output_mapper.format_output(output_data)

# Save processed predictions to outputs.csv
# (the expected name for the algorithm output file)
output_data.to_csv("outputs.csv", index=False)
