import argparse
from pyteomics.mztab import MzTab
import pandas as pd
from glob import glob
import re
import urllib.parse

parser = argparse.ArgumentParser()
parser.add_argument(
    "--mztab_path", required=True, help="The path to the predictions mztab file made by casanovo."
)
parser.add_argument(
    "--mgf_in_dir", required=True, help="The dir with the input dataset .mgf files.",
)
args = parser.parse_args()

class IntermediateMapper():
    def __init__(self, output_path: str, input_dir: str):

        # Read predictions from output file
        output_MzTab = MzTab(output_path)
        self.output_data = output_MzTab.spectrum_match_table[["spectra_ref", "sequence"]]
        self.input_dir = input_dir

        # file://xyz%20abc.mgf => xyz abc.mgf
        file_parse = lambda path: urllib.parse.unquote(urllib.parse.urlparse(path).path)

        # Create a map from the spectra_ref to the file name
        meta_keys = list(output_MzTab.metadata.keys())
        self.id2file = {key.split("-")[0]: file_parse(output_MzTab.metadata[key]) for key in meta_keys if "ms_run[" in key}

    def format_spectrum_id(self, spectrum_id: str) -> str:
        """
        Transform scan index generated by the algorithm to the common format
        `ms_run[i]:index=j` -> `filename:j`.
        """
        spectrum_id = re.sub("[a-z=_\[\]]", "", spectrum_id)

        filename, spectrum_idx = self._spectrum_id_to_filename_idx(spectrum_id)
        spectrum_id = filename + ":" + spectrum_idx
        return spectrum_id

intermediate_mapper = IntermediateMapper(args.mztab_path, args.mgf_in_dir)
print(intermediate_mapper.id2file)
